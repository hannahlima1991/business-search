{"version":3,"sources":["components/assets/catGif.gif","components/assets/backArrow.svg","utilities/utility.js","components/Home/index.js","components/Details/index.js","components/NavBar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","doCORSRequest","options","dataHandler","x","XMLHttpRequest","Promise","resolve","reject","open","method","url","onload","data","test","setRequestHeader","send","zipCodeDataHandler","JSON","parse","target","response","latitude","longitude","yelpDataHandler","businesses","detailsHandler","Home","useState","inputValue","setInputValue","businessList","setBusinessList","loading","setLoading","useEffect","AOS","init","duration","refresh","zipCodeLocation","userInput","a","apiRequest","then","locationData","getBusinessesApiCall","alert","listOfBusinesses","className","style","height","length","placeholder","type","value","onChange","event","onClick","src","catGif","map","business","i","businessId","id","name","rating","distance","key","data-aos","to","Math","round","count","size","color2","edit","Details","props","image_url","price","location","address1","city","state","zip_code","display_phone","businessDetailsObject","setbusinessDetailsObject","getBusinessDetails","detailsApiRequest","match","params","details","console","log","class","alt","href","localStorage","getItem","stars","setItem","backArrow","history","push","NavBar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9728ed3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/catGif.dbcca15c.gif\";","module.exports = __webpack_public_path__ + \"static/media/backArrow.77826e6e.svg\";","//Yelp's api doesn't accept requests from the client side, so I had to get around that, it could also\n//be fixed by me having a proxy server.\nvar cors_api_url = \"https://cors-anywhere.herokuapp.com/\";\n\nconst yelpApiKey =\n  \"K0gHrVfelnkUTxxEMFYLNP1rbg0ZsJjsST4-ge5F31B-5KQVvUs496_jVAU1fsvi1qM4GbAFWF26Fk01vLrQWfWNd5HPfmPcC40EAumLZhCBu0ooycf_DjCMvlxNX3Yx\";\n\n//This function feeds to Home and Details components,it gets the promise and points to the heroku\n//url and uses their server side to make a request and it returns the information it receives back to me.\nexport function doCORSRequest(options, dataHandler) {\n  var x = new XMLHttpRequest();\n  return new Promise(function (resolve, reject) {\n    x.open(options.method, cors_api_url + options.url);\n    x.onload = function (data) {\n      resolve(dataHandler(data));\n    };\n    if (/^POST/i.test(options.method)) {\n      x.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    }\n    x.setRequestHeader(\"Authorization\", `Bearer ${yelpApiKey}`);\n    x.send(options.data);\n  });\n}\n\n//The data handlers help me decide what data I want to pass back to my UI\n//I deconstructed the objects in a way where I could have acess only to the keys i needed.\nexport const zipCodeDataHandler = (data) => {\n  const { latitude, longitude } = JSON.parse(data.target.response);\n  if (latitude && longitude) {\n    return {\n      longitude,\n      latitude,\n    };\n  } else {\n    return null;\n  }\n};\nexport const yelpDataHandler = (data) => {\n  const { businesses } = JSON.parse(data.target.response);\n  return businesses;\n};\nexport const detailsHandler = (data) => {\n  const businessObject = JSON.parse(data.target.response);\n  return businessObject;\n};\n","import React, { useState, useEffect } from \"react\";\nimport AOS from \"aos\";\nimport \"aos/dist/aos.css\";\nimport \"./Home.css\";\nimport catGif from \"../assets/catGif.gif\";\nimport {\n  doCORSRequest,\n  zipCodeDataHandler,\n  yelpDataHandler,\n} from \"../../utilities/utility\";\nimport { Link } from \"react-router-dom\";\nimport ReactStars from \"react-stars\";\n\n//This are my hooks and usig them I will be able to manage and change states.\nfunction Home() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [businessList, setBusinessList] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    AOS.init({\n      duration: 1000,\n    });\n    AOS.refresh();\n  }, []);\n\n  //I have a second api that translates zip code to lat,lng, this was necessary because Yelp's api doens't work with zip code\n  //ZIPCODE API- The zip code function works by passing the user input variable as an argument,and wait for doCorsRequest to give me back the data\n  const zipCodeLocation = async (userInput) => {\n    const zipCodeApiKey = \"UnWxhm2IIMISFP3afI7j\";\n    const apiRequest = `https://api.geolake.com/geocode?api_key=${zipCodeApiKey}&country=US&q=${userInput}`;\n    const options = {\n      method: \"GET\",\n      url: apiRequest,\n    };\n\n    const locationData = await doCORSRequest(options, zipCodeDataHandler).then(\n      (data) => data\n    );\n    //if locationData returns true, give the data,if it doesn't stop the loading gif and notify the user\n    if (locationData) {\n      getBusinessesApiCall(locationData);\n    } else {\n      setLoading(false);\n      alert(\"Zip Code in invalid!\");\n    }\n  };\n\n  //YELP BUSINESS API-This function works the same way as the zip code one\n  const getBusinessesApiCall = async (locationData) => {\n    const yelpApiRequest = \"https://api.yelp.com/v3/businesses\";\n    const { latitude, longitude } = locationData;\n    const options = {\n      method: \"GET\",\n      url:\n        yelpApiRequest +\n        `/search?latitude=${latitude}&longitude=${longitude}&sort_by=distance`,\n    };\n    const listOfBusinesses = await doCORSRequest(options, yelpDataHandler).then(\n      (data) => data\n    );\n    //setLoading(false) makes the loading gif stops when the fetch request for thelistOfBusinesses comes back.\n    setLoading(false);\n    setBusinessList(listOfBusinesses);\n  };\n\n  return (\n    <div\n      className=\"wrapper\"\n      //programatic style for backgrouwnd image\n      style={{ height: businessList.length === 0 ? \"100vh\" : \"100%\" }}\n    >\n      {/* receives the userInput as value by using the hook,once the button is clicked it sets the loding gif */}\n      {/* back on and triggers the zip code function using the inputValue as an argument */}\n      <div className=\"user-input\">\n        <input\n          className=\"text-box\"\n          placeholder=\"Insert Zip Code\"\n          type=\"number\"\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value);\n          }}\n        ></input>\n        <button\n          className=\"search-button\"\n          onClick={() => {\n            setLoading(true);\n            zipCodeLocation(inputValue);\n          }}\n        >\n          Search\n        </button>\n      </div>\n      <div className=\"container\">\n        {/* loading Gif ternary,if loading,show me gif,if the response is back, show me the data */}\n        {loading ? (\n          <img className=\"loding-gif\" src={catGif} />\n        ) : (\n          <div className=\"row business-card \">\n            {businessList.map((business, i) => {\n              const businessId = \"/business/\" + business.id;\n              // getting only the keys i need from the responseObject\n              const { id, name, rating, distance } = business;\n\n              return (\n                <div\n                  className=\"col-lg-4 business-card-list\"\n                  key={i}\n                  data-aos=\"fade-up\"\n                >\n                  <div className=\"card\">\n                    <div className=\"card-body vertical-center text-center w-100\">\n                      <Link to={businessId}>\n                        <h4 className=\"card-title\">\n                          <b>{name}</b>\n                          <p className=\"distance-marker\">\n                            {Math.round(distance)}m.\n                          </p>\n                        </h4>\n                      </Link>\n                      <div className=\"d-flex justify-content-center\">\n                        {/* library I am using for rating stars */}\n                        <ReactStars\n                          count={5}\n                          value={rating}\n                          size={24}\n                          color2=\"#ffd700\"\n                          edit={false}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Details.css\";\nimport catGif from \"../assets/catGif.gif\";\nimport backArrow from \"../assets/backArrow.svg\";\nimport { doCORSRequest, detailsHandler } from \"../../utilities/utility\";\nimport ReactStars from \"react-stars\";\n\n//My hooks to manage states and setting their initial state.\nfunction Details(props) {\n  const [loading, setLoading] = useState(true);\n  const [businessDetailsObject, setbusinessDetailsObject] = useState({\n    name: \"\",\n    image_url: \"\",\n    rating: \"\",\n    price: \"\",\n    location: {\n      address1: \"\",\n      city: \"\",\n      state: \"\",\n      zip_code: \"\",\n    },\n    display_phone: \"\",\n  });\n\n  //every time the component mounts,useEffect will rerender the information.\n  useEffect(() => {\n    getBusinessDetails();\n  }, []);\n\n  // I use props to read from the id on the specific object and display the information for the nested object\n  const getBusinessDetails = async () => {\n    const detailsApiRequest = `https://api.yelp.com/v3/businesses/${props.match.params.id}`;\n    const options = {\n      method: \"GET\",\n      url: detailsApiRequest,\n    };\n    const details = await doCORSRequest(options, detailsHandler).then(\n      (data) => data\n    );\n    setLoading(false);\n    setbusinessDetailsObject(details);\n  };\n\n  //deconstruction to get only the pertinent information from the details endpoint\n  const {\n    name,\n    image_url,\n    rating,\n    price,\n    location,\n    display_phone,\n    id,\n  } = businessDetailsObject;\n  const { address1, city, state, zip_code } = location;\n  console.log(businessDetailsObject);\n\n  return (\n    <div className=\"image-container\">\n      <div className=\"container\">\n        {loading ? (\n          // Loading gif\n          <img className=\"loding-gif\" src={catGif} />\n        ) : (\n          // Business Details\n          <div class=\"card mb-3 cardSize\">\n            <div class=\"row no-gutters\">\n              <div class=\"col-md-6\">\n                <img\n                  src={image_url}\n                  class=\"card-img business-picture\"\n                  alt=\"Food Plate\"\n                />\n              </div>\n              <div class=\"col-md-6\">\n                <div class=\"card-body business-details\">\n                  <h5 class=\"card-title business-name\">\n                    <b>{name}</b>\n                  </h5>\n                  <p class=\"card-text\">\n                    <b>Address:</b>{\" \"}\n                    <a\n                      target=\"_blank\"\n                      href={`https://maps.google.com/?q=${address1},${city},${state},${zip_code}`}\n                    >\n                      {address1}, {city}, {state} {zip_code}\n                    </a>\n                  </p>\n                  <p class=\"card-text\">\n                    <b>Phone:</b>\n                    <a href={`tell:${display_phone}`}>{display_phone}</a>\n                  </p>\n                  <p class=\"card-text\">\n                    <b>Price:</b> {price}\n                  </p>\n                  <p class=\"card-text\">\n                    <b>General Rate:</b>{\" \"}\n                    <div className=\"d-flex justify-content-center\">\n                      <ReactStars\n                        count={5}\n                        value={rating}\n                        size={24}\n                        color2=\"#ffd700\"\n                        edit={false}\n                      />\n                    </div>\n                  </p>\n                  <p class=\"card-text\">\n                    <b>Rate this business:</b>\n                    <div className=\"d-flex justify-content-center\">\n                      <ReactStars\n                        count={5}\n                        value={\n                          localStorage.getItem(id)\n                            ? localStorage.getItem(id)\n                            : 0\n                        }\n                        size={24}\n                        color2=\"#ffd700\"\n                        edit={true}\n                        onChange={(stars) => localStorage.setItem(id, stars)}\n                      />\n                    </div>\n                    <div className=\"back-arrow\">\n                      <img\n                        src={backArrow}\n                        onClick={() => props.history.push(\"/\")}\n                      />\n                    </div>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Details;\n","import React from \"react\";\nimport \"./NavBar.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction NavBar() {\n  return (\n    <div className=\"navigation-bar\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\n        <Link to=\"/\">\n          <p className=\"navbar-brand\" href=\"#\">\n            Business Finder\n          </p>\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <Link to=\"/\">\n              <li className=\"nav-item active\">\n                <p className=\"nav-link\" href=\"#\">\n                  Home <span className=\"sr-only\">(current)</span>\n                </p>\n              </li>\n            </Link>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Details from \"./components/Details\";\nimport NavBar from \"./components/NavBar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//react routes pointing at specific componentes to conditionally render data.\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/business/:id\" component={Details} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}